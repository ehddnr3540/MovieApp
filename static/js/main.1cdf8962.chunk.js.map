{"version":3,"sources":["noimg.png","MovieList.js","Pagenation.js","MovieInfo.js","logo.png","App.js","reportWebVitals.js","index.js"],"names":["MovieList","props","className","img","src","Noimg","title","voteAverage","href","onClick","viewMovieInfo","movieId","class","Pagenation","pageLinks","i","active","currentPage","push","nextPage","pages","MovieInfo","releaseDate","overview","closeMovieInfo","App","api_key","useState","movies","setMovies","search","setSearch","query","setQuery","setSurrentPage","totalResults","setTotalResults","currentMovie","setcurrentMovie","noMovie","setNoMovie","id","fillterMovie","filter","movie","newCurrentMovie","length","numberPage","Math","floor","Logo","alt","onSubmit","e","preventDefault","fetch","then","data","json","catch","alert","console","log","results","total_results","type","placeholder","value","onChange","target","map","items","poster_path","vote_average","pageNumber","release_date","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1cdf8962.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/noimg.4e5bf58a.png\";","import React from 'react'\r\nimport Noimg from './noimg.png'\r\n\r\nconst MovieList = (props) => {\r\n  return (\r\n    <div className=\"movie-wrap\">\r\n      <div className=\"movie-img\">\r\n        {\r\n          props.img == null ? <img src={Noimg} />\r\n            : <img src={`https://image.tmdb.org/t/p/w500/${props.img}`}></img>\r\n        }\r\n      </div>\r\n      <div className=\"movie-content\">\r\n        <h4>{props.title}</h4>\r\n        <h3>{props.voteAverage}</h3>\r\n      </div>\r\n      <div className=\"detail-btn\">\r\n        <a href=\"#\" onClick={() => props.viewMovieInfo(props.movieId)}>Detail</a>\r\n        <i class=\"fas fa-arrow-right\"></i>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MovieList\r\n\r\n\r\n","\r\nconst Pagenation = (props) => {\r\n  const pageLinks = []\r\n\r\n  for (let i = 1; i <= props.pages + 1; i++) {\r\n\r\n    let active = props.currentPage === i ? 'active' : '';\r\n    pageLinks.push(\r\n      <li className={`wave-effect ${active}`} key={i} onClick={() => props.nextPage(i)}>\r\n        <a href=\"#\">{i}</a>\r\n      </li>\r\n    )\r\n    if (i === 10) {\r\n      break\r\n    }\r\n\r\n  }\r\n  return (\r\n    <div className=\"pagenation-wrap\">\r\n      <ul className=\"pagenation\">\r\n        {pageLinks}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Pagenation\r\n","import Noimg from './noimg.png'\r\n\r\nconst MovieInfo = props => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"movie-infowrap\">\r\n        <div className=\"img\">\r\n          {\r\n            props.img == null ? <img src={Noimg} />\r\n              : <img src={`https://image.tmdb.org/t/p/w500/${props.img}`}></img>\r\n          }\r\n        </div>\r\n        <div className=\"txt\">\r\n          <h2>{props.title}</h2>\r\n          <h4>{props.releaseDate}</h4>\r\n          <h2 className=\"rate\"><span>Rate : </span>{props.voteAverage}</h2>\r\n          <p>{props.overview}</p>\r\n          <a className=\"close-btn\" href=\"#\" onClick={props.closeMovieInfo}><i class=\"fas fa-times-circle\"></i></a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MovieInfo\r\n","export default __webpack_public_path__ + \"static/media/logo.0af2d27a.png\";","import { useState, useEffect } from 'react'\nimport MovieList from './MovieList'\nimport Pagenation from './Pagenation'\nimport MovieInfo from './MovieInfo'\nimport Logo from './logo.png'\n\nfunction App() {\n  const api_key = '8c8479a7341bf9bb3bf15f6dc39c6cb4'\n\n  const [movies, setMovies] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('');\n  const [currentPage, setSurrentPage] = useState(1);\n  const [totalResults, setTotalResults] = useState(0);\n  const [currentMovie, setcurrentMovie] = useState(null);\n  const [noMovie, setNoMovie] = useState('');\n\n  //1.submit버튼을 클릭하면 input칸에 입력한 value값이 api의 query로 전달되서 MovieList영역이 재 렌더링되도록 하는 함수, 그리고 total_result값을 받아서 pagenation을 구현\n  const handleSubmit = (e) => {\n    e.preventDefault();//새로고침 방지\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=${api_key}&query=${query}`)\n      .then(data => data.json())\n      .catch(data => alert('Fail to get information, check the URl'))\n      .then(data => {\n        console.log(data)\n        setMovies(data.results);//2.불러온 영화 데이터들을 json으로 변환해서 movie변수에 넣음\n        setTotalResults(data.total_results);//4.불러온 영화 데이터들의 총 합을 json으로 변환해서 totalResults변수에 넣음\n        if (data.total_results === 0) {\n          setNoMovie(<div className=\"noMovie\"><p>We can't find the movie</p></div>)\n        } else {\n          setNoMovie('')\n        }\n      })\n  }\n  //7. 전달 받은 파라미터를 api의 page에 넣어서 해당되는 페이지를 렌더링한다.\n  const nextPage = (pageNumber) => {\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=${api_key}&query=${query}&page=${pageNumber}`)\n      .then(data => data.json())\n      .catch(data => alert('Fail to get information, check the URl'))\n      .then(data => {\n        setMovies(data.results);\n        setSurrentPage(pageNumber);\n      })\n  }\n\n  const viewMovieInfo = (id) => {\n    const fillterMovie = movies.filter(movie => movie.id === id);\n    const newCurrentMovie = fillterMovie.length > 0 ? fillterMovie[0] : null;\n    setcurrentMovie(newCurrentMovie)\n  }\n\n  const closeMovieInfo = () => {\n    setcurrentMovie(null)\n  }\n\n  const handleChange = (e) => {\n    setSearch(e.target.value)\n    setQuery(search)\n  }\n\n  const numberPage = Math.floor(totalResults / 20);//5. totalResults값을 20으로 나누어 총 페이지수를 구한한뒤 numberPage변수에 넣는다(api에서도 총 20개의 1페이지 정보만 전달됬음)\n  return (\n    < div className=\"App\">\n      <nav>\n        <div className=\"container\">\n          <div className=\"logo\">\n            <img src={Logo} alt=\"\"></img>\n          </div>\n          <ul className=\"menu\">\n            <li></li>\n          </ul>\n        </div>\n      </nav>\n      {currentMovie === null ?\n        <div className=\"container\">\n          <div className=\"search-area\">\n            <h1>Search the Movie</h1>\n            < form onSubmit={handleSubmit} >\n              <input type=\"text\" className=\"search-bar\" placeholder=\"Search\" value={search} onChange={handleChange} />\n              <i class=\"fas fa-search search-logo\"></i>\n              <button type='submit'></button>\n            </form>\n          </div>\n          <div className=\"movie-area\">\n            <div className=\"movie-list\">\n              {movies.map((items, i) => (//3.movie변수에 넣은 영화 데이터들을 array.map을 이용해 movieList들을 렌더링함\n                <MovieList key={i} movieId={items.id} title={items.title} img={items.poster_path} viewMovieInfo={viewMovieInfo} voteAverage={items.vote_average} />\n              ))}\n              {noMovie}\n            </div>\n          </div>\n          {totalResults > 20 ? <Pagenation pages={numberPage} nextPage={nextPage} currentPage={currentPage} /> : \"\"}\n          {/* //6. 만약 총 페이지수가 20이 넘으면  pagenation을 numberPage수만큼 렌더링 한다. 그리고 페이지 숫자를 클릭하면 그 클릭한 숫자를 파라미터로 전달받는다*/}\n        </div>\n        : <MovieInfo closeMovieInfo={closeMovieInfo} title={currentMovie.title} img={currentMovie.poster_path} overview={currentMovie.overview} releaseDate={currentMovie.release_date} voteAverage={currentMovie.vote_average} />}\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './response.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}