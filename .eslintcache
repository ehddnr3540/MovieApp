[{"C:\\Users\\ehddn\\Desktop\\movie-app\\src\\reportWebVitals.js":"1","C:\\Users\\ehddn\\Desktop\\movie-app\\src\\App.js":"2","C:\\Users\\ehddn\\Desktop\\movie-app\\src\\MovieList.js":"3","C:\\Users\\ehddn\\Desktop\\movie-app\\src\\Pagenation.js":"4","C:\\Users\\ehddn\\Desktop\\movie-app\\src\\MovieInfo.js":"5","C:\\Users\\ehddn\\Desktop\\movie-app\\src\\index.js":"6"},{"size":362,"mtime":1606137463449,"results":"7","hashOfConfig":"8"},{"size":4433,"mtime":1607139753322,"results":"9","hashOfConfig":"8"},{"size":694,"mtime":1607141029246,"results":"10","hashOfConfig":"8"},{"size":547,"mtime":1607142746912,"results":"11","hashOfConfig":"8"},{"size":769,"mtime":1607665998666,"results":"12","hashOfConfig":"8"},{"size":525,"mtime":1607139228881,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dq76bs",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"C:\\Users\\ehddn\\Desktop\\movie-app\\src\\reportWebVitals.js",[],"C:\\Users\\ehddn\\Desktop\\movie-app\\src\\App.js",["28"],"import { useState, useEffect } from 'react'\nimport MovieList from './MovieList'\nimport Pagenation from './Pagenation'\nimport MovieInfo from './MovieInfo'\nimport Logo from './logo.png'\n\nfunction App() {\n  const api_key = '8c8479a7341bf9bb3bf15f6dc39c6cb4'\n\n  const [movies, setMovies] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('');\n  const [currentPage, setSurrentPage] = useState(1);\n  const [totalResults, setTotalResults] = useState(0);\n  const [currentMovie, setcurrentMovie] = useState(null);\n  const [noMovie, setNoMovie] = useState('');\n\n  //1.submit버튼을 클릭하면 input칸에 입력한 value값이 api의 query로 전달되서 MovieList영역이 재 렌더링되도록 하는 함수, 그리고 total_result값을 받아서 pagenation을 구현\n  const handleSubmit = (e) => {\n    e.preventDefault();//새로고침 방지\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=${api_key}&query=${query}`)\n      .then(data => data.json())\n      .catch(data => alert('Fail to get information, check the URl'))\n      .then(data => {\n        console.log(data)\n        setMovies(data.results);//2.불러온 영화 데이터들을 json으로 변환해서 movie변수에 넣음\n        setTotalResults(data.total_results);//4.불러온 영화 데이터들의 총 합을 json으로 변환해서 totalResults변수에 넣음\n        if (data.total_results === 0) {\n          setNoMovie(<div className=\"noMovie\"><p>We can't find the movie</p></div>)\n        } else {\n          setNoMovie('')\n        }\n      })\n  }\n  //7. 전달 받은 파라미터를 api의 page에 넣어서 해당되는 페이지를 렌더링한다.\n  const nextPage = (pageNumber) => {\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=${api_key}&query=${query}&page=${pageNumber}`)\n      .then(data => data.json())\n      .catch(data => alert('Fail to get information, check the URl'))\n      .then(data => {\n        setMovies(data.results);\n        setSurrentPage(pageNumber);\n      })\n  }\n\n  const viewMovieInfo = (id) => {\n    const fillterMovie = movies.filter(movie => movie.id === id);\n    const newCurrentMovie = fillterMovie.length > 0 ? fillterMovie[0] : null;\n    setcurrentMovie(newCurrentMovie)\n  }\n\n  const closeMovieInfo = () => {\n    setcurrentMovie(null)\n  }\n\n  const handleChange = (e) => {\n    setSearch(e.target.value)\n    setQuery(search)\n  }\n\n  const numberPage = Math.floor(totalResults / 20);//5. totalResults값을 20으로 나누어 총 페이지수를 구한한뒤 numberPage변수에 넣는다(api에서도 총 20개의 1페이지 정보만 전달됬음)\n  return (\n    < div className=\"App\">\n      <nav>\n        <div className=\"container\">\n          <div className=\"logo\">\n            <img src={Logo} alt=\"\"></img>\n          </div>\n          <ul className=\"menu\">\n            <li></li>\n          </ul>\n        </div>\n      </nav>\n      {currentMovie === null ?\n        <div className=\"container\">\n          <div className=\"search-area\">\n            <h1>Search the Movie</h1>\n            < form onSubmit={handleSubmit} >\n              <input type=\"text\" className=\"search-bar\" placeholder=\"Search\" value={search} onChange={handleChange} />\n              <i class=\"fas fa-search search-logo\"></i>\n              <button type='submit'></button>\n            </form>\n          </div>\n          <div className=\"movie-area\">\n            <div className=\"movie-list\">\n              {movies.map((items, i) => (//3.movie변수에 넣은 영화 데이터들을 array.map을 이용해 movieList들을 렌더링함\n                <MovieList key={i} movieId={items.id} title={items.title} img={items.poster_path} viewMovieInfo={viewMovieInfo} voteAverage={items.vote_average} />\n              ))}\n              {noMovie}\n            </div>\n          </div>\n          {totalResults > 20 ? <Pagenation pages={numberPage} nextPage={nextPage} currentPage={currentPage} /> : \"\"}\n          {/* //6. 만약 총 페이지수가 20이 넘으면  pagenation을 numberPage수만큼 렌더링 한다. 그리고 페이지 숫자를 클릭하면 그 클릭한 숫자를 파라미터로 전달받는다*/}\n        </div>\n        : <MovieInfo closeMovieInfo={closeMovieInfo} title={currentMovie.title} img={currentMovie.poster_path} overview={currentMovie.overview} releaseDate={currentMovie.release_date} voteAverage={currentMovie.vote_average} />}\n    </div >\n  );\n}\n\nexport default App;\n","C:\\Users\\ehddn\\Desktop\\movie-app\\src\\MovieList.js",["29","30","31"],"C:\\Users\\ehddn\\Desktop\\movie-app\\src\\Pagenation.js",["32"],"C:\\Users\\ehddn\\Desktop\\movie-app\\src\\MovieInfo.js",["33","34","35"],"C:\\Users\\ehddn\\Desktop\\movie-app\\src\\index.js",[],["36","37"],{"ruleId":"38","severity":1,"message":"39","line":1,"column":20,"nodeType":"40","messageId":"41","endLine":1,"endColumn":29},{"ruleId":"42","severity":1,"message":"43","line":9,"column":31,"nodeType":"44","endLine":9,"endColumn":50},{"ruleId":"42","severity":1,"message":"43","line":10,"column":15,"nodeType":"44","endLine":10,"endColumn":73},{"ruleId":"45","severity":1,"message":"46","line":18,"column":9,"nodeType":"44","endLine":18,"endColumn":72},{"ruleId":"45","severity":1,"message":"46","line":10,"column":9,"nodeType":"44","endLine":10,"endColumn":21},{"ruleId":"42","severity":1,"message":"43","line":9,"column":33,"nodeType":"44","endLine":9,"endColumn":52},{"ruleId":"42","severity":1,"message":"43","line":10,"column":17,"nodeType":"44","endLine":10,"endColumn":75},{"ruleId":"45","severity":1,"message":"46","line":18,"column":11,"nodeType":"44","endLine":18,"endColumn":76},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-global-assign","no-unsafe-negation"]